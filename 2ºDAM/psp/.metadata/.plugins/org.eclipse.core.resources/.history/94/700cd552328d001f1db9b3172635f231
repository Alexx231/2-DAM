package avtividad;

import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.CountDownLatch;

class Caballo implements Runnable {
    private String nombre;
    private int distancia;
    private static final int DISTANCIA_TOTAL = 100;
    private CountDownLatch latch;
    private List<String> resultados;

    public Caballo(String nombre, CountDownLatch latch, List<String> resultados) {
        this.nombre = nombre;
        this.distancia = 0;
        this.latch = latch;
        this.resultados = resultados;
    }

    public void avanzar() {
        this.distancia += (int) (Math.random() * 10);
    }

    @Override
    public void run() {
        while (distancia < DISTANCIA_TOTAL) {
            avanzar();
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
        synchronized (resultados) {
            resultados.add(nombre);
        }
        latch.countDown();
    }
}

class Carrera {
    private List<Caballo> caballos;
    private List<String> resultados;
    private CountDownLatch latch;

    public Carrera(List<Caballo> caballos) {
        this.caballos = caballos;
        this.resultados = Collections.synchronizedList(new ArrayList<>());
        this.latch = new CountDownLatch(caballos.size());
    }

    public void iniciarCarrera() {
        for (Caballo caballo : caballos) {
            new Thread(caballo).start();
        }
        try {
            latch.await();
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    public List<String> getResultados() {
        return resultados;
    }
}

public class Actividad5{
    public static void main(String[] args) {
        List<Caballo> caballosCarrera1 = new ArrayList<>();
        List<Caballo> caballosCarrera2 = new ArrayList<>();

        for (int i = 1; i <= 5; i++) {
            caballosCarrera1.add(new Caballo("Caballo" + i, new CountDownLatch(5), new ArrayList<>()));
            caballosCarrera2.add(new Caballo("Caballo" + (i + 5), new CountDownLatch(5), new ArrayList<>()));
        }

        Carrera carrera1 = new Carrera(caballosCarrera1);
        Carrera carrera2 = new Carrera(caballosCarrera2);

        Thread hiloCarrera1 = new Thread(() -> {
            carrera1.iniciarCarrera();
            guardarResultados("resultados_carrera1.txt", carrera1.getResultados());
        });

        Thread hiloCarrera2 = new Thread(() -> {
            carrera2.iniciarCarrera();
            guardarResultados("resultados_carrera2.txt", carrera2.getResultados());
        });

        hiloCarrera1.start();
        hiloCarrera2.start();
    }

    private static void guardarResultados(String nombreArchivo, List<String> resultados) {
        try (FileWriter writer = new FileWriter(nombreArchivo)) {
            for (String resultado : resultados) {
                writer.write(resultado + "\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}